{
  "info": {
    "name": "Media Management Service",
    "description": "Complete API testing collection for Media Management Service with organized endpoints for file upload, management, and retrieval",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{mediaManagementServiceAccessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "testMediaId",
      "value": "123",
      "type": "string",
      "description": "Sample media ID for testing"
    },
    {
      "key": "testRecipeId",
      "value": "456",
      "type": "string",
      "description": "Sample recipe ID for testing"
    },
    {
      "key": "testIngredientId",
      "value": "789",
      "type": "string",
      "description": "Sample ingredient ID for testing"
    },
    {
      "key": "testStepId",
      "value": "101",
      "type": "string",
      "description": "Sample step ID for testing"
    },
    {
      "key": "createdMediaId",
      "value": "",
      "type": "string",
      "description": "Media ID created during testing session"
    },
    {
      "key": "uploadToken",
      "value": "",
      "type": "string",
      "description": "Upload token for presigned upload flow"
    },
    {
      "key": "uploadUrl",
      "value": "",
      "type": "string",
      "description": "Presigned upload URL"
    }
  ],
  "item": [
    {
      "name": "Health & Monitoring",
      "description": "Service health checks, readiness probes, and metrics endpoints",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('service', 'media-management-service');",
                  "    pm.expect(response).to.have.property('checks');",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(['healthy', 'degraded']).to.include(response.status);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/health",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Readiness Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Readiness check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('service', 'media-management-service');",
                  "    pm.expect(response).to.have.property('checks');",
                  "});",
                  "",
                  "pm.test('Service is ready', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('ready');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/ready",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["ready"]
            }
          }
        },
        {
          "name": "Metrics Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Metrics endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is Prometheus format', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('# HELP');",
                  "    pm.expect(responseText).to.include('# TYPE');",
                  "});",
                  "",
                  "pm.test('Content type is correct', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceMetricsUrl}}/metrics",
              "host": ["{{mediaManagementServiceMetricsUrl}}"],
              "path": ["metrics"]
            }
          }
        }
      ]
    },
    {
      "name": "Media Upload",
      "description": "File upload endpoints including direct and presigned upload flows",
      "item": [
        {
          "name": "1. Initiate Presigned Upload",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Upload session created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('media_id');",
                  "    pm.expect(response).to.have.property('upload_url');",
                  "    pm.expect(response).to.have.property('upload_token');",
                  "    pm.expect(response).to.have.property('expires_at');",
                  "    pm.expect(response).to.have.property('status', 'Pending');",
                  "});",
                  "",
                  "pm.test('Extract upload information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('createdMediaId', response.media_id);",
                  "    pm.environment.set('uploadToken', response.upload_token);",
                  "    pm.environment.set('uploadUrl', response.upload_url);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filename\": \"test-image.jpg\",\n    \"content_type\": \"image/jpeg\",\n    \"file_size\": 1048576\n}"
            },
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/upload-request",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "upload-request"]
            }
          }
        },
        {
          "name": "2. Upload File to Presigned URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('File uploaded successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has processing status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('media_id');",
                  "    pm.expect(response).to.have.property('content_hash');",
                  "    pm.expect(response).to.have.property('processing_status');",
                  "    pm.expect(['Processing', 'Complete']).to.include(response.processing_status);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "image/jpeg"
              }
            ],
            "body": {
              "mode": "file",
              "file": {
                "src": "test-image.jpg"
              }
            },
            "url": {
              "raw": "{{uploadUrl}}",
              "host": ["{{uploadUrl}}"]
            }
          }
        },
        {
          "name": "Direct Upload (Legacy)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Direct upload successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains media information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('content_hash');",
                  "    pm.expect(response).to.have.property('original_filename');",
                  "    pm.expect(response).to.have.property('media_type');",
                  "    pm.expect(response).to.have.property('file_size');",
                  "});",
                  "",
                  "pm.test('Extract media ID', function () {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('createdMediaId', response.id.toString());",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test-image.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Media Management",
      "description": "CRUD operations for media files including listing, retrieval, and deletion",
      "item": [
        {
          "name": "List All Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Media list retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response).to.have.property('pagination');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Pagination contains expected fields', function () {",
                  "    const response = pm.response.json();",
                  "    const pagination = response.pagination;",
                  "    pm.expect(pagination).to.have.property('page_size');",
                  "    pm.expect(pagination).to.have.property('has_next');",
                  "    pm.expect(pagination).to.have.property('has_prev');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", ""]
            }
          }
        },
        {
          "name": "List Media with Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Paginated media list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Respects limit parameter', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.length).to.be.at.most(10);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/?limit=10&status=Complete",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", ""],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "Complete"
                }
              ]
            }
          }
        },
        {
          "name": "Get Media by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Media retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains media metadata', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('content_hash');",
                  "    pm.expect(response).to.have.property('original_filename');",
                  "    pm.expect(response).to.have.property('media_type');",
                  "    pm.expect(response).to.have.property('file_size');",
                  "    pm.expect(response).to.have.property('processing_status');",
                  "    pm.expect(response).to.have.property('uploaded_at');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/{{testMediaId}}",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "{{testMediaId}}"]
            }
          }
        },
        {
          "name": "Get Created Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Created media retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Media ID matches created media', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id.toString()).to.equal(pm.environment.get('createdMediaId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/{{createdMediaId}}",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "{{createdMediaId}}"]
            }
          }
        },
        {
          "name": "Get Upload Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Upload status retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Status response contains expected fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('media_id');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('uploaded_at');",
                  "    pm.expect(['Pending', 'Processing', 'Complete', 'Failed']).to.include(response.status);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/{{createdMediaId}}/status",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "{{createdMediaId}}", "status"]
            }
          }
        },
        {
          "name": "Download Media File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Media download successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has file content', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.not.be.null;",
                  "    pm.expect(pm.response.responseSize).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Has appropriate headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/{{testMediaId}}/download",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "{{testMediaId}}", "download"]
            }
          }
        },
        {
          "name": "Delete Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Media deleted successfully', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/{{testMediaId}}",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "{{testMediaId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Recipe Integration",
      "description": "Recipe-related media endpoints for associating media with recipes, ingredients, and steps",
      "item": [
        {
          "name": "Get Media by Recipe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Recipe media retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of media IDs', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/recipe/{{testRecipeId}}",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "recipe", "{{testRecipeId}}"]
            }
          }
        },
        {
          "name": "Get Media by Recipe Ingredient",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ingredient media retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of media IDs', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/recipe/{{testRecipeId}}/ingredient/{{testIngredientId}}",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": [
                "media",
                "recipe",
                "{{testRecipeId}}",
                "ingredient",
                "{{testIngredientId}}"
              ]
            }
          }
        },
        {
          "name": "Get Media by Recipe Step",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Step media retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of media IDs', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/recipe/{{testRecipeId}}/step/{{testStepId}}",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": [
                "media",
                "recipe",
                "{{testRecipeId}}",
                "step",
                "{{testStepId}}"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "description": "Testing error handling and edge cases",
      "item": [
        {
          "name": "Get Non-existent Media",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 404 for non-existent media', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/99999",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "99999"]
            }
          }
        },
        {
          "name": "Upload with Invalid Content Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 400 for invalid content type', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response contains validation message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filename\": \"test.exe\",\n    \"content_type\": \"application/x-executable\",\n    \"file_size\": 1048576\n}"
            },
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/upload-request",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "upload-request"]
            }
          }
        },
        {
          "name": "Upload File Too Large",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 400 for file too large', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates file size limit exceeded', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message.toLowerCase()).to.include('size');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filename\": \"huge-file.jpg\",\n    \"content_type\": \"image/jpeg\",\n    \"file_size\": 104857600\n}"
            },
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/media/upload-request",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["media", "upload-request"]
            }
          }
        },
        {
          "name": "Invalid Route Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 404 for invalid route', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mediaManagementServiceBaseUrl}}/invalid-endpoint",
              "host": ["{{mediaManagementServiceBaseUrl}}"],
              "path": ["invalid-endpoint"]
            }
          }
        }
      ]
    }
  ]
}
