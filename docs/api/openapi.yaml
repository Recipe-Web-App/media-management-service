---
openapi: 3.1.0
info:
  title: Media Management Service API
  description: |
    Production-ready media management service for the Recipe Web Application ecosystem.

    Handles file uploads, processing, storage, and retrieval with a focus on security,
    performance, and scalability. Built with Rust using Clean/Hexagonal Architecture.

    **Current Status**: Development phase - most media endpoints return placeholder responses.
  version: 0.1.0
  contact:
    name: Recipe Web App Team
  license:
    name: MIT

servers:
  - url: http://localhost:3000/api/v1/media-management
    description: Local development server
  - url: http://media-management.local/api/v1/media-management
    description: Kubernetes deployment

tags:
  - name: health
    description: Health and readiness checks
  - name: media
    description: Media file operations

paths:
  /health:
    get:
      tags: [health]
      summary: Health check
      description: |
        Kubernetes liveness probe endpoint with comprehensive dependency validation.

        Supports three status levels:
        - **healthy**: All dependencies operational
        - **degraded**: At least one dependency working (service partially functional)
        - **unhealthy**: All critical dependencies failing
      operationId: healthCheck
      responses:
        "200":
          description: Service is healthy or degraded (can still serve requests)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
              examples:
                healthy:
                  summary: All dependencies healthy
                  value:
                    status: "healthy"
                    timestamp: "2025-01-15T10:30:00Z"
                    service: "media-management-service"
                    version: "0.1.0"
                    response_time_ms: 25
                    checks:
                      database:
                        status: "healthy"
                        response_time_ms: 5
                      storage:
                        status: "healthy"
                        response_time_ms: 3
                      overall: "healthy"
                degraded:
                  summary: Some dependencies failing
                  value:
                    status: "degraded"
                    timestamp: "2025-01-15T10:30:00Z"
                    service: "media-management-service"
                    version: "0.1.0"
                    response_time_ms: 2050
                    checks:
                      database:
                        status: "unhealthy"
                        response_time_ms: 2000
                      storage:
                        status: "healthy"
                        response_time_ms: 3
                      overall: "degraded"
        "503":
          description: Service is unhealthy (all dependencies failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
              example:
                status: "unhealthy"
                timestamp: "2025-01-15T10:30:00Z"
                service: "media-management-service"
                version: "0.1.0"
                response_time_ms: 4010
                checks:
                  database:
                    status: "timeout"
                    response_time_ms: 2000
                  storage:
                    status: "unhealthy"
                    response_time_ms: 2000
                  overall: "unhealthy"

  /ready:
    get:
      tags: [health]
      summary: Readiness check
      description: |
        Kubernetes readiness probe endpoint with binary ready/not-ready status.

        Unlike health checks, readiness is binary:
        - **ready**: ALL dependencies operational (service can accept traffic)
        - **not_ready**: ANY dependency failed (service should not receive traffic)

        Used by Kubernetes to control traffic routing to pods.
      operationId: readinessCheck
      responses:
        "200":
          description: Service is ready to accept traffic (all dependencies operational)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessResponse"
              example:
                status: "ready"
                timestamp: "2025-01-15T10:30:00Z"
                service: "media-management-service"
                version: "0.1.0"
                response_time_ms: 25
                checks:
                  database:
                    status: "ready"
                    response_time_ms: 5
                  storage:
                    status: "ready"
                    response_time_ms: 3
                  overall: "ready"
        "503":
          description: Service is not ready (any dependency failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessResponse"
              example:
                status: "not_ready"
                timestamp: "2025-01-15T10:30:00Z"
                service: "media-management-service"
                version: "0.1.0"
                response_time_ms: 2010
                checks:
                  database:
                    status: "timeout"
                    response_time_ms: 2000
                  storage:
                    status: "ready"
                    response_time_ms: 3
                  overall: "not_ready"

  /media:
    post:
      tags: [media]
      summary: Upload media file
      description: |
        Upload a new media file to the system.

        **Status**: ðŸš§ Not Implemented - Returns 501 Not Implemented
      operationId: uploadMedia
      requestBody:
        description: Media file upload request
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The media file to upload
                filename:
                  type: string
                  description: Original filename
                  example: "example.jpg"
              required:
                - file
                - filename
      responses:
        "201":
          description: Media uploaded successfully (planned)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadMediaResponse"
        "400":
          description: Bad request - invalid file or parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "413":
          description: File too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          description: Not implemented (current response)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Not Implemented"
                message: "Media upload functionality is not yet implemented"

    get:
      tags: [media]
      summary: List media files
      description: |
        Retrieve a list of media files with optional filtering and pagination.

        **Status**: ðŸš§ Partially Implemented - Returns empty array
      operationId: listMedia
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: offset
          in: query
          description: Number of items to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by processing status
          required: false
          schema:
            $ref: "#/components/schemas/ProcessingStatus"
      responses:
        "200":
          description: List of media files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaDto"
              example: []
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /media/{id}:
    get:
      tags: [media]
      summary: Get media by ID
      description: |
        Retrieve detailed information about a specific media file.

        **Status**: ðŸš§ Not Implemented - Returns 404 Not Found
      operationId: getMediaById
      parameters:
        - name: id
          in: path
          description: The unique identifier of the media file
          required: true
          schema:
            $ref: "#/components/schemas/MediaId"
      responses:
        "200":
          description: Media information (planned)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaDto"
        "404":
          description: Media not found (current response)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Not Found"
                message: "Media not found"

    delete:
      tags: [media]
      summary: Delete media file
      description: |
        Permanently delete a media file and its associated database record.

        This operation removes both the file from storage and the metadata from the database.
        The deletion is irreversible.

        **Status**: âœ… Implemented
      operationId: deleteMedia
      parameters:
        - name: id
          in: path
          description: The unique identifier of the media file to delete
          required: true
          schema:
            $ref: "#/components/schemas/MediaId"
      responses:
        "204":
          description: Media file successfully deleted
        "404":
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Not Found"
                message: "Media with ID 123"
        "500":
          description: Internal server error during deletion
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Internal Server Error"
                message: "Failed to delete media file"

  /media/{id}/download:
    get:
      tags: [media]
      summary: Download media file
      description: |
        Download the actual media file binary data.

        **Status**: ðŸš§ Not Implemented - Returns 501 Not Implemented
      operationId: downloadMedia
      parameters:
        - name: id
          in: path
          description: The unique identifier of the media file
          required: true
          schema:
            $ref: "#/components/schemas/MediaId"
      responses:
        "200":
          description: Media file binary data (planned)
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            video/mp4:
              schema:
                type: string
                format: binary
            audio/mpeg:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Attachment with original filename
              schema:
                type: string
                example: 'attachment; filename="example.jpg"'
            Content-Length:
              description: Size of the file in bytes
              schema:
                type: integer
        "404":
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          description: Not implemented (current response)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Not Implemented"
                message: "Media download functionality is not yet implemented"

  /media/upload-request:
    post:
      tags: [media]
      summary: Initiate presigned upload session
      description: |
        Creates a presigned upload session for secure, UI-friendly file uploads with progress tracking.

        **Features:**
        - HMAC-SHA256 signed URLs for security
        - 15-minute expiration by default
        - File size and content type validation
        - Dangerous file extension filtering
        - Deduplication support

        **Status**: âœ… Implemented
      operationId: initiateUpload
      requestBody:
        description: Upload session initiation request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateUploadRequest"
            example:
              filename: "example.jpg"
              content_type: "image/jpeg"
              file_size: 1048576
      responses:
        "200":
          description: Upload session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateUploadResponse"
              example:
                media_id: 123
                upload_url: >
                  http://localhost:3000/api/v1/media-management/media/upload/upload_abc123?signature=def456&expires=1704067200&size=1048576&type=image%2Fjpeg
                upload_token: "upload_abc123"
                expires_at: "2024-01-01T12:00:00Z"
                status: "Pending"
        "400":
          description: Invalid request (file too large, dangerous extension, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                file_too_large:
                  summary: File size exceeds limit
                  value:
                    error: "Bad Request"
                    message: "File size 52428800 bytes exceeds maximum allowed size of 50000000 bytes"
                dangerous_extension:
                  summary: Dangerous file extension
                  value:
                    error: "Bad Request"
                    message: "File type not allowed: malware.exe"
                invalid_content_type:
                  summary: Invalid content type format
                  value:
                    error: "Bad Request"
                    message: "Content type format is invalid"

  /media/upload/{token}:
    put:
      tags: [media]
      summary: Upload file to presigned URL
      description: |
        Uploads the actual file content using the presigned URL from upload initiation.

        **Security:**
        - Validates HMAC signature for tampering protection
        - Checks URL expiration timestamp
        - Validates file size matches expectation
        - Content type verification

        **Status**: âœ… Implemented
      operationId: uploadFile
      parameters:
        - name: token
          in: path
          description: Upload token from initiation response
          required: true
          schema:
            type: string
            pattern: "^upload_[a-zA-Z0-9]{32}$"
            example: "upload_abc123def456"
        - name: signature
          in: query
          description: HMAC signature for security validation
          required: true
          schema:
            type: string
            pattern: "^[a-f0-9]{64}$"
            example: "def456789abc123"
        - name: expires
          in: query
          description: Unix timestamp for URL expiration
          required: true
          schema:
            type: integer
            format: int64
            example: 1704067200
        - name: size
          in: query
          description: Expected file size in bytes
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1048576
        - name: type
          in: query
          description: URL-encoded content type
          required: true
          schema:
            type: string
            example: "image%2Fjpeg"
      requestBody:
        description: Raw file data
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: File uploaded and processing started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadMediaResponse"
              example:
                media_id: 123
                content_hash: "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
                processing_status: "Processing"
                upload_url: null
        "400":
          description: Invalid signature, expired URL, or file size mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                expired_url:
                  summary: Upload URL has expired
                  value:
                    error: "Bad Request"
                    message: "Upload URL has expired at 2024-01-01T11:00:00Z"
                size_mismatch:
                  summary: File size doesn't match expectation
                  value:
                    error: "Bad Request"
                    message: "File size mismatch: expected 1048576 bytes, got 1024000 bytes"
        "401":
          description: Invalid or expired signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Unauthorized"
                message: "Invalid upload signature"

  /media/{id}/status:
    get:
      tags: [media]
      summary: Get upload/processing status
      description: |
        Retrieves the current status of a media upload, including processing progress and any error information.

        **Use Cases:**
        - Poll upload progress after initiating presigned upload
        - Check processing status after file upload
        - Get error details if processing failed
        - Retrieve download URL when processing complete

        **Status**: âœ… Implemented
      operationId: getUploadStatus
      parameters:
        - $ref: "#/components/parameters/MediaId"
      responses:
        "200":
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadStatusResponse"
              examples:
                pending:
                  summary: Upload session created, awaiting file
                  value:
                    media_id: 123
                    status: "Pending"
                    progress: null
                    error_message: null
                    download_url: null
                    processing_time_ms: null
                    uploaded_at: null
                    completed_at: null
                processing:
                  summary: File uploaded, currently processing
                  value:
                    media_id: 123
                    status: "Processing"
                    progress: 65
                    error_message: null
                    download_url: null
                    processing_time_ms: null
                    uploaded_at: "2024-01-01T12:00:00Z"
                    completed_at: null
                complete:
                  summary: Processing finished successfully
                  value:
                    media_id: 123
                    status: "Complete"
                    progress: 100
                    error_message: null
                    download_url: "http://localhost:3000/api/v1/media-management/media/123/download"
                    processing_time_ms: 2500
                    uploaded_at: "2024-01-01T12:00:00Z"
                    completed_at: "2024-01-01T12:00:02Z"
                failed:
                  summary: Processing failed with error
                  value:
                    media_id: 123
                    status: "Failed"
                    progress: null
                    error_message: "Corrupted file header detected"
                    download_url: null
                    processing_time_ms: 1200
                    uploaded_at: "2024-01-01T12:00:00Z"
                    completed_at: "2024-01-01T12:00:01Z"
        "404":
          description: Media not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Not Found"
                message: "Media with ID 123"

  /media/recipe/{recipe_id}:
    get:
      tags: [media]
      summary: Get media IDs by recipe
      description: |
        Retrieve media IDs associated with a specific recipe.

        Returns an array of media IDs that are linked to the recipe.
      operationId: getMediaByRecipe
      parameters:
        - name: recipe_id
          in: path
          description: The unique identifier of the recipe
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        "200":
          description: List of media IDs for the recipe
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaId"
              example: [1, 2, 3]
        "400":
          description: Invalid recipe ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /media/recipe/{recipe_id}/ingredient/{ingredient_id}:
    get:
      tags: [media]
      summary: Get media IDs by recipe ingredient
      description: |
        Retrieve media IDs associated with a specific ingredient in a recipe.

        Returns an array of media IDs that are linked to the ingredient.
      operationId: getMediaByIngredient
      parameters:
        - name: recipe_id
          in: path
          description: The unique identifier of the recipe
          required: true
          schema:
            type: integer
            format: int64
            example: 123
        - name: ingredient_id
          in: path
          description: The unique identifier of the ingredient
          required: true
          schema:
            type: integer
            format: int64
            example: 456
      responses:
        "200":
          description: List of media IDs for the recipe ingredient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaId"
              example: [4, 5]
        "400":
          description: Invalid recipe or ingredient ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /media/recipe/{recipe_id}/step/{step_id}:
    get:
      tags: [media]
      summary: Get media IDs by recipe step
      description: |
        Retrieve media IDs associated with a specific step in a recipe.

        Returns an array of media IDs that are linked to the step.
      operationId: getMediaByStep
      parameters:
        - name: recipe_id
          in: path
          description: The unique identifier of the recipe
          required: true
          schema:
            type: integer
            format: int64
            example: 123
        - name: step_id
          in: path
          description: The unique identifier of the step
          required: true
          schema:
            type: integer
            format: int64
            example: 789
      responses:
        "200":
          description: List of media IDs for the recipe step
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaId"
              example: [6, 7, 8]
        "400":
          description: Invalid recipe or step ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    MediaId:
      type: integer
      format: int64
      description: Unique identifier for media files (database BIGSERIAL)
      example: 123

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - service
        - version
        - response_time_ms
        - checks
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall health status
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of the health check
          example: "2025-01-15T10:30:00Z"
        service:
          type: string
          description: Service name identifier
          example: "media-management-service"
        version:
          type: string
          description: Service version
          example: "0.1.0"
        response_time_ms:
          type: integer
          minimum: 0
          description: Total time taken for health check in milliseconds
          example: 25
        checks:
          type: object
          required:
            - database
            - storage
            - overall
          properties:
            database:
              $ref: "#/components/schemas/DependencyCheck"
            storage:
              $ref: "#/components/schemas/DependencyCheck"
            overall:
              type: string
              enum: [healthy, degraded, unhealthy]
              description: Overall assessment of all dependency checks
              example: healthy

    ReadinessResponse:
      type: object
      required:
        - status
        - timestamp
        - service
        - version
        - response_time_ms
        - checks
      properties:
        status:
          type: string
          enum: [ready, not_ready]
          description: Binary readiness status
          example: ready
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of the readiness check
          example: "2025-01-15T10:30:00Z"
        service:
          type: string
          description: Service name identifier
          example: "media-management-service"
        version:
          type: string
          description: Service version
          example: "0.1.0"
        response_time_ms:
          type: integer
          minimum: 0
          description: Total time taken for readiness check in milliseconds
          example: 25
        checks:
          type: object
          required:
            - database
            - storage
            - overall
          properties:
            database:
              $ref: "#/components/schemas/ReadinessDependencyCheck"
            storage:
              $ref: "#/components/schemas/ReadinessDependencyCheck"
            overall:
              type: string
              enum: [ready, not_ready]
              description: Overall readiness assessment - ready only if ALL dependencies ready
              example: ready

    MediaDto:
      type: object
      required:
        - id
        - content_hash
        - original_filename
        - media_type
        - file_size
        - processing_status
        - uploaded_at
        - updated_at
      properties:
        id:
          $ref: "#/components/schemas/MediaId"
        content_hash:
          type: string
          pattern: "^[a-f0-9]{64}$"
          description: SHA-256 hash of the file content
          example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        original_filename:
          type: string
          description: Original filename as uploaded
          example: "example.jpg"
        media_type:
          $ref: "#/components/schemas/MediaType"
        file_size:
          type: integer
          format: int64
          minimum: 0
          description: File size in bytes
          example: 1048576
        processing_status:
          $ref: "#/components/schemas/ProcessingStatus"
        uploaded_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the file was uploaded
          example: "2024-08-24T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the file was last updated
          example: "2024-08-24T10:35:00Z"

    MediaType:
      oneOf:
        - $ref: "#/components/schemas/ImageMediaType"
        - $ref: "#/components/schemas/VideoMediaType"
        - $ref: "#/components/schemas/AudioMediaType"
      discriminator:
        propertyName: type

    ImageMediaType:
      type: object
      required:
        - Image
      properties:
        Image:
          type: object
          required:
            - format
            - width
            - height
          properties:
            format:
              type: string
              enum: [Jpeg, Png, WebP, Avif, Gif]
              example: Jpeg
            width:
              type: integer
              minimum: 1
              example: 1920
            height:
              type: integer
              minimum: 1
              example: 1080

    VideoMediaType:
      type: object
      required:
        - Video
      properties:
        Video:
          type: object
          required:
            - format
            - width
            - height
          properties:
            format:
              type: string
              enum: [Mp4, Webm, Mov, Avi]
              example: Mp4
            width:
              type: integer
              minimum: 1
              example: 1280
            height:
              type: integer
              minimum: 1
              example: 720
            duration_seconds:
              type: integer
              minimum: 0
              nullable: true
              example: 120

    AudioMediaType:
      type: object
      required:
        - Audio
      properties:
        Audio:
          type: object
          required:
            - format
          properties:
            format:
              type: string
              enum: [Mp3, Wav, Flac, Ogg]
              example: Mp3
            duration_seconds:
              type: integer
              minimum: 0
              nullable: true
              example: 240
            bitrate:
              type: integer
              minimum: 0
              nullable: true
              example: 128000

    ProcessingStatus:
      oneOf:
        - type: string
          enum: [Pending, Processing, Complete]
        - type: object
          required:
            - Failed
          properties:
            Failed:
              type: string
              description: Error message describing the failure
              example: "Corrupted file header"
      examples:
        - Pending
        - Processing
        - Complete
        - Failed: "Invalid file format"

    UploadMediaResponse:
      type: object
      required:
        - media_id
        - content_hash
        - processing_status
      properties:
        media_id:
          $ref: "#/components/schemas/MediaId"
        content_hash:
          type: string
          pattern: "^[a-f0-9]{64}$"
          description: SHA-256 hash of the uploaded file
          example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        processing_status:
          $ref: "#/components/schemas/ProcessingStatus"
        upload_url:
          type: string
          format: uri
          nullable: true
          description: Optional direct URL to access the uploaded file
          example: "https://example.com/media/123"

    InitiateUploadRequest:
      type: object
      required:
        - filename
        - content_type
        - file_size
      properties:
        filename:
          type: string
          minLength: 1
          maxLength: 255
          description: Original filename (validated for security)
          example: "example.jpg"
        content_type:
          type: string
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9!#$&\\-\\^_]*\/[a-zA-Z0-9][a-zA-Z0-9!#$&\\-\\^_.]*$"
          description: MIME content type (must contain slash)
          example: "image/jpeg"
        file_size:
          type: integer
          format: int64
          minimum: 1
          maximum: 52428800
          description: File size in bytes (max 50MB default)
          example: 1048576

    InitiateUploadResponse:
      type: object
      required:
        - media_id
        - upload_url
        - upload_token
        - expires_at
        - status
      properties:
        media_id:
          $ref: "#/components/schemas/MediaId"
        upload_url:
          type: string
          format: uri
          description: Presigned URL for file upload with security parameters
          example: >
            http://localhost:3000/api/v1/media-management/media/upload/upload_abc123?signature=def456&expires=1704067200&size=1048576&type=image%2Fjpeg
        upload_token:
          type: string
          pattern: "^upload_[a-zA-Z0-9]{32}$"
          description: Unique token identifying the upload session
          example: "upload_abc123def456"
        expires_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp when upload URL expires
          example: "2024-01-01T12:00:00Z"
        status:
          type: string
          enum: [Pending]
          description: Initial status is always Pending
          example: "Pending"

    UploadStatusResponse:
      type: object
      required:
        - media_id
        - status
      properties:
        media_id:
          $ref: "#/components/schemas/MediaId"
        status:
          type: string
          enum: [Pending, Processing, Complete, Failed]
          description: Current processing status
          example: "Complete"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
          description: Processing progress percentage (0-100)
          example: 85
        error_message:
          type: string
          nullable: true
          description: Error description if status is Failed
          example: "Corrupted file header detected"
        download_url:
          type: string
          format: uri
          nullable: true
          description: Download URL when processing complete
          example: "http://localhost:3000/api/v1/media-management/media/123/download"
        processing_time_ms:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: Total processing time in milliseconds
          example: 2500
        uploaded_at:
          type: string
          format: date-time
          nullable: true
          description: ISO 8601 timestamp when file was uploaded
          example: "2024-01-01T12:00:00Z"
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: ISO 8601 timestamp when processing completed
          example: "2024-01-01T12:00:02Z"

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type identifier
          example: "Not Found"
        message:
          type: string
          description: Human-readable error description
          example: "The requested resource was not found"
        details:
          type: object
          description: Additional error context (optional)
          additionalProperties: true

    DependencyCheck:
      type: object
      required:
        - status
        - response_time_ms
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, timeout]
          description: Status of individual dependency check
          example: healthy
        response_time_ms:
          type: integer
          minimum: 0
          description: Time taken for dependency check in milliseconds
          example: 5

    ReadinessDependencyCheck:
      type: object
      required:
        - status
        - response_time_ms
      properties:
        status:
          type: string
          enum: [ready, not_ready, timeout]
          description: Readiness status of individual dependency check
          example: ready
        response_time_ms:
          type: integer
          minimum: 0
          description: Time taken for dependency check in milliseconds
          example: 5

  parameters:
    MediaId:
      name: id
      in: path
      description: The unique identifier of the media file
      required: true
      schema:
        $ref: "#/components/schemas/MediaId"

  responses:
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Not Found"
            message: "The requested resource was not found"

    NotImplemented:
      description: The requested functionality is not yet implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Not Implemented"
            message: "This functionality is not yet implemented"

    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Bad Request"
            message: "Invalid request parameters"

    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication (planned - currently disabled)

# Security is currently disabled in development
# security:
#   - BearerAuth: []

externalDocs:
  description: Media Management Service Documentation
  url: ./API.md
